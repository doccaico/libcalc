.{
    .name = "libcalc",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.0",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    // .dependencies = .{
    //     // See `zig fetch --save <url>` for a command-line interface for adding dependencies.
    //     .libcalc = .{
    //         .url = "https://github.com/doccaico/libcalc/archive/2d2b6095d57419f976c6014a5ca4acf2a827914b.tar.gz",
    //         .hash = "1220a133932cfdd0dbf5d2584e8f2ecfec368f7132e2ddfcf8929da7eea2389ebab5",
    //         // .hash = "12208f2c6526fdf32fdeac524d15b09fb690bb94d6fd550fefb9330f6e2ae362a1ca",
    //     },
    // },

    // Specifies the set of files and directories that are included in this package.
    // Only files and directories listed here are included in the `hash` that
    // is computed for this package.
    // Paths are relative to the build root. Use the empty string (`""`) to refer to
    // the build root itself.
    // A directory listed here means that all files within, recursively, are included.
    .paths = .{
        // This makes *all* files, recursively, included in this package. It is generally
        // better to explicitly list the files and directories instead, to insure that
        // fetching from tarballs, file system paths, and version control all result
        // in the same contents hash.
        // For example...
        //"LICENSE",
        //"README.md",
        "build.zig",
        "build.zig.zon",
        "src",
        "include",
    },
}
