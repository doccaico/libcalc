.{
    .name = "libcalc",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.0",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    // .dependencies = .{
    //     // See `zig fetch --save <url>` for a command-line interface for adding dependencies.
    //     .libcalc = .{
    //         .url = "https://github.com/doccaico/libcalc/archive/47276fd5a17dd06d1022762d6c2f6a37dc6713d3.tar.gz",
    //         .hash = "1220da57ae655d3d2a6c585a5245a6ef5fe0c87d86e6ff54710f3b25e3771481e1f8",
    //     },
    .paths = .{
        "build.zig",
        "include",
        "src",
    },

    // Specifies the set of files and directories that are included in this package.
    // Only files and directories listed here are included in the `hash` that
    // is computed for this package.
    // Paths are relative to the build root. Use the empty string (`""`) to refer to
    // the build root itself.
    // A directory listed here means that all files within, recursively, are included.
    // .paths = .{
    //     // This makes *all* files, recursively, included in this package. It is generally
    //     // better to explicitly list the files and directories instead, to insure that
    //     // fetching from tarballs, file system paths, and version control all result
    //     // in the same contents hash.
    //     "build.zig",
    //     "build.zig.zon",
    // },
}
